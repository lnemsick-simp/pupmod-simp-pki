require 'spec_helper'
require 'tmpdir'

provider_class = Puppet::Type.type(:pki_cert_sync).provider(:redhat)

describe provider_class do
  # Test methods that do not rely upon internal provider state
  context 'stateless methods' do
    before(:all) do
      @tmpdir = Dir.mktmpdir
      @source_dir = File.join(@tmpdir, 'source')
      FileUtils.mkdir_p(@source_dir)

      @target_dir = File.join(@tmpdir, 'target')
      FileUtils.mkdir_p(@target_dir)
    end

    after(:all) { FileUtils.remove_entry_secure @tmpdir }

    let (:provider) { resource.provider }
    let (:resource) do
      Puppet::Type.type(:pki_cert_sync).new({
        :name         => @target_dir,
        :source       => @source_dir,
        :provider     => 'redhat'
      })
    end

    describe 'copy_file' do
      it 'should fail if source file does not exist' do
        expect{ provider.copy_file('oops','cert_t') }.to raise_error(Errno::ENOENT, /#{Regexp.escape(File.join(@source_dir, 'oops'))}/)

      end
    end

    describe 'file_diff' do
    end

    describe 'get_selinux_context' do
    end

    describe 'strip_x509_headers' do
    end

  end

  # Test provider end-to-end operation to exercise the remaining methods.
  # This is required because the rest of the methods rely upon the output of
  # state() and internal state generated by source() and stored in provider
  # instance variables.
  context 'stateful methods via scenarios' do

    describe 'source' do
    end

    describe 'source_insync?' do
    end

    describe 'source=' do
    end

    describe 'generate_cacerts_file' do
    end

    describe 'handle_cacerts_file' do
    end
  end
end
